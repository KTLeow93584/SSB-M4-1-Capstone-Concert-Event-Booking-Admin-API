// =======================================
// Setup
const { TELESIGN_CUSTOMER_ID, TELESIGN_API_KEY } = process.env;

// Replace the defaults below with your Telesign authentication credentials or pull them from environment variables.
const customerId = TELESIGN_CUSTOMER_ID;
const apiKey = TELESIGN_API_KEY;

// From: https://www.npmjs.com/package/telesign
const telesign = require("telesign").setup({ customerId: customerId, apiKey: apiKey });
// =======================================
// Phone ID Validation.
// Status: Working.

function verifyPhoneNumberIdentity(phoneNumber) {
  // Debug
  console.log("[Identifying Phone Number] Number:", phoneNumber);

  telesign.phoneId.standard(
    { phoneNumber: phoneNumber },
    onVerifyPhoneNumberIdentityCallback
  );
}

// Define the callback.
function onVerifyPhoneNumberIdentityCallback(error, responseBody) {
  // Display the response body in the console for debugging purposes.
  // In your production code, you would likely remove this.
  if (!error)
    console.log("\nResponse body:\n" + JSON.stringify(responseBody));
  else
    console.error("An exception occurred. Error:\n\n" + error);
}
// =======================================;
// Phone ID Verification (via OTP SMS).
// Status: Not Working as intended, module not found.
function sendOTPSMSToPhoneNumber(phoneNumber) {
  // Generate one-time passcode (OTP) and add it to request parameters.
  const verifyCode = Math.floor(Math.random() * 99999).toString();

  // Define the callback.
  function smsVerifyCallback(error, responseBody) {
    // Display the response body in the console for debugging purposes.
    // In your production code, you would likely remove this.
    if (error === null) {
      // Display the response body in the console for debugging purposes.
      // In your production code, you would likely remove this.
      console.log("\nResponse body:\n" + JSON.stringify(responseBody));
    }
    else
      console.error("Unable to send message. " + error);
    
    // Display prompt to enter asserted OTP in the console.
    // In your production code, you would instead collect the asserted OTP from the end-user.
    showPrompt("\nEnter the verification code you received:\n", 
      // Determine if the asserted OTP matches your original OTP, and resolve the login attempt accordingly.
      // You can simulate this by reporting whether the codes match.
      (input) => {
        console.log(`\nYour code is ${input === verifyCode ? "correct" : "incorrect"}.`);
        process.exit();
      }
    );
  }
  // =======================================
  // Make the request and capture the response.
  var options = {
    // required
    phoneNumber: phoneNumber,
    // required
    ucid: "BACF",
    // optional, defaults to random value generated by TeleSign
    verifyCode: verifyCode,
    // optional, must include a $$CODE$$ placeholder to integrate the verifyCode token
    template: 'Your Republic of Rock code is $$CODE$$. Thank you!' 
  };

  telesign.verify.sms(options, smsVerifyCallback);
}
// =======================================
function showPrompt(question, callback) {
  const stdin = process.stdin;
  const stdout = process.stdout;
  
  stdin.resume();
  stdout.write(question);
  stdin.once("data", (data) => callback(data.toString().trim()));
}
// =======================================
module.exports = {
  sendOTPSMSToPhoneNumber,
  verifyPhoneNumberIdentity
};
// =======================================
